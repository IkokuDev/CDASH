// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  name        String?
  password    String
  role        String   @default("USER")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  staffMember Staff?

  @@map("users")
}

model Staff {
  id           String       @id @default(uuid())
  userId       String       @unique
  firstName    String
  lastName     String
  position     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id])
  assignments  Assignment[]
  departmentId String?
  department   Department?  @relation(fields: [departmentId], references: [id])
  auditLogs    AuditLog[]

  @@map("staff")
}

model Asset {
  id          String       @id @default(uuid())
  name        String
  type        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  assignments Assignment[]
  auditLogs   AuditLog[]

  @@map("assets")
}

model Department {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  staff     Staff[]

  @@map("departments")
}

model Location {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  assignments Assignment[]

  @@map("locations")
}

model Assignment {
  id         String   @id @default(uuid())
  staffId    String
  assetId    String
  locationId String
  assignedAt DateTime @default(now())
  returnedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  staff    Staff    @relation(fields: [staffId], references: [id])
  asset    Asset    @relation(fields: [assetId], references: [id])
  location Location @relation(fields: [locationId], references: [id])

  @@map("assignments")
}

model AuditLog {
  id        String   @id @default(uuid())
  action    String
  details   String?
  staffId   String?
  assetId   String?
  createdAt DateTime @default(now())

  staff Staff? @relation(fields: [staffId], references: [id])
  asset Asset? @relation(fields: [assetId], references: [id])

  @@map("audit_logs")
}
